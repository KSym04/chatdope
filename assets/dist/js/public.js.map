{"version":3,"file":"assets/dist/js/public.js","mappings":";UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;;AAEAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACxD,IAAIC,QAAQ,GAAGF,QAAQ,CAACG,cAAc,CAAC,gBAAgB,CAAC;EACxD,IAAIC,eAAe,GAAGJ,QAAQ,CAACK,aAAa,CAC1C,gCACF,CAAC;EACD,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,eAAe,GAAGN,QAAQ,CAACO,YAAY;EAE3CP,QAAQ,CAACD,gBAAgB,CAAC,OAAO,EAAE,YAAY;IAC7C,IAAI,CAACS,KAAK,CAACC,MAAM,GAAG,MAAM;IAC1B,IAAIC,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC;IAElC,IAAI,IAAI,CAACD,KAAK,KAAK,EAAE,EAAE;MACrB;MACA,IAAI,CAACH,KAAK,CAACC,MAAM,GAAGH,eAAe,GAAG,IAAI;MAC1CJ,eAAe,CAACM,KAAK,CAACC,MAAM,GAAG,MAAM;IACvC,CAAC,MAAM,IAAIC,KAAK,CAACG,MAAM,GAAGR,OAAO,IAAIK,KAAK,CAACG,MAAM,IAAIT,OAAO,EAAE;MAC5D;MACA,IAAI,CAACI,KAAK,CAACC,MAAM,GAAG,IAAI,CAACF,YAAY,GAAG,IAAI;MAC5CL,eAAe,CAACM,KAAK,CAACC,MAAM,GAAG,IAAI,CAACF,YAAY,GAAG,IAAI;IACzD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC,C;;;;;;;;;;AC9BF","sources":["webpack://chatdope/webpack/bootstrap","webpack://chatdope/webpack/runtime/make namespace object","webpack://chatdope/./assets/js/public.js","webpack://chatdope/./assets/css/frontend.scss?a1a2"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * This script handles the frontend chat interface for ChatDope.\n * It manages click events for contacts and the send button, fetches chat messages, and sends messages.\n *\n * @file public.js\n */\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  let textArea = document.getElementById(\"chatdope-input\");\n  let inputBoxWrapper = document.querySelector(\n    \".chatdope-container__input-box\"\n  );\n  let maxRows = 5;\n  let minRows = 1;\n  let singleRowHeight = textArea.scrollHeight;\n\n  textArea.addEventListener(\"input\", function () {\n    this.style.height = \"auto\";\n    let lines = this.value.split(\"\\n\");\n\n    if (this.value === \"\") {\n      // if there's no text, return the textarea to its original size\n      this.style.height = singleRowHeight + \"px\";\n      inputBoxWrapper.style.height = \"auto\";\n    } else if (lines.length > minRows && lines.length <= maxRows) {\n      // otherwise, if the number of lines is between 2 and 5, adjust the height\n      this.style.height = this.scrollHeight + \"px\";\n      inputBoxWrapper.style.height = this.scrollHeight + \"px\";\n    }\n  });\n});\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":["document","addEventListener","textArea","getElementById","inputBoxWrapper","querySelector","maxRows","minRows","singleRowHeight","scrollHeight","style","height","lines","value","split","length"],"sourceRoot":""}