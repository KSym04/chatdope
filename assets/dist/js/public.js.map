{"version":3,"file":"assets/dist/js/public.js","mappings":";UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNA;AACA;AACA;AACA;AACAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACxD;EACA,IAAMC,aAAa,GAAGF,QAAQ,CAACG,cAAc,CAAC,gBAAgB,CAAC;;EAE/D;EACA,IAAMC,QAAQ,GAAGJ,QAAQ,CAACG,cAAc,CAAC,gBAAgB,CAAC;;EAE1D;EACA,IAAME,UAAU,GAAGL,QAAQ,CAACG,cAAc,CAAC,eAAe,CAAC;;EAE3D;EACA,IAAMG,aAAa,GAAGF,QAAQ,CAACG,YAAY;;EAE3C;EACA,IAAMC,gBAAgB,GAAGJ,QAAQ,CAACK,YAAY;;EAE9C;EACA,IAAMC,WAAW,mDAA2C;;EAE5D;EACA,IAAIC,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC;;EAE7B;EACA,IAAIC,iBAAiB,GAAG,KAAK;;EAE7B;EACAT,QAAQ,CAACU,KAAK,CAACC,SAAS,GAAG,QAAQ;;EAEnC;AACF;AACA;AACA;EACEX,QAAQ,CAACH,gBAAgB,CAAC,OAAO,EAAEe,WAAW,CAAC;;EAE/C;AACF;AACA;AACA;EACEZ,QAAQ,CAACH,gBAAgB,CAAC,OAAO,EAAE,UAAUgB,CAAC,EAAE;IAC9C,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,IAAI,CAACD,CAAC,CAACE,QAAQ,EAAE;MACpCF,CAAC,CAACG,cAAc,CAAC,CAAC;MAClBC,WAAW,CAAC,CAAC;IACf;EACF,CAAC,CAAC;;EAEF;EACAhB,UAAU,CAACJ,gBAAgB,CAAC,OAAO,EAAEoB,WAAW,CAAC;;EAEjD;EACA,IAAMC,cAAc,GAAGtB,QAAQ,CAACG,cAAc,CAAC,mBAAmB,CAAC;EACnEmB,cAAc,CAACrB,gBAAgB,CAAC,OAAO,EAAEsB,sBAAsB,CAAC;;EAEhE;EACA,IAAMC,WAAW,GAAGxB,QAAQ,CAACG,cAAc,CAAC,gBAAgB,CAAC;EAC7DqB,WAAW,CAACvB,gBAAgB,CAAC,OAAO,EAAEwB,SAAS,CAAC;;EAEhD;EACA,IAAMC,iBAAiB,GAAG1B,QAAQ,CAAC2B,aAAa,CAAC,qBAAqB,CAAC;;EAEvE;EACAC,mBAAmB,CAAC,CAAC;;EAErB;AACF;AACA;EACE,SAASZ,WAAWA,CAAA,EAAG;IACrB;IACA,IAAI,CAACF,KAAK,CAACe,MAAM,GAAG,MAAM;;IAE1B;IACA,IAAI,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5B,IAAI,CAACjB,KAAK,CAACe,MAAM,GAAGvB,aAAa,GAAG,IAAI;MACxC,IAAI,CAACQ,KAAK,CAACC,SAAS,GAAG,QAAQ;MAC/B;IACF;;IAEA;IACAiB,cAAc,CAAC,IAAI,CAAC;EACtB;;EAEA;AACF;AACA;AACA;EACE,SAASA,cAAcA,CAACC,eAAe,EAAE;IACvC,IACEA,eAAe,CAACC,YAAY,GAAG1B,gBAAgB,IAC/CyB,eAAe,CAACC,YAAY,IAAI1B,gBAAgB,GAAG,CAAC,EACpD;MACAyB,eAAe,CAACnB,KAAK,CAACe,MAAM,GAAGI,eAAe,CAACC,YAAY,GAAG,IAAI;IACpE,CAAC,MAAM,IAAID,eAAe,CAACC,YAAY,GAAG1B,gBAAgB,GAAG,CAAC,EAAE;MAC9DyB,eAAe,CAACnB,KAAK,CAACe,MAAM,GAAGrB,gBAAgB,GAAG,CAAC,GAAG,IAAI;MAC1DyB,eAAe,CAACnB,KAAK,CAACC,SAAS,GAAG,MAAM;IAC1C,CAAC,MAAM;MACLkB,eAAe,CAACnB,KAAK,CAACe,MAAM,GAAGvB,aAAa,GAAG,IAAI;IACrD;EACF;;EAEA;AACF;AACA;EACE,SAASe,WAAWA,CAAA,EAAG;IACrB,IAAMc,cAAc,GAAG/B,QAAQ,CAAC0B,KAAK,CAACC,IAAI,CAAC,CAAC;IAC5C,IAAII,cAAc,KAAK,EAAE,IAAIA,cAAc,CAACC,MAAM,IAAI,GAAG,EAAE;MACzDC,aAAa,CAACF,cAAc,CAAC;MAE7B/B,QAAQ,CAAC0B,KAAK,GAAG,EAAE;MACnB1B,QAAQ,CAACU,KAAK,CAACe,MAAM,GAAGvB,aAAa,GAAG,IAAI;MAC5CF,QAAQ,CAACU,KAAK,CAACC,SAAS,GAAG,QAAQ;IACrC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASuB,eAAeA,CAAC3B,YAAY,EAAE4B,WAAW,EAAE;IAClD,IAAMC,cAAc,GAAGD,WAAW,GAAG5B,YAAY;IACjD,IAAM8B,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;IAEnC,IAAID,cAAc,GAAGC,WAAW,EAAE;MAChC;MACA,OAAOF,WAAW,CAACG,kBAAkB,CAAC,EAAE,EAAE;QACxCC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,OAAO,EAAE;IACX;EACF;;EAEA;AACF;AACA;AACA;EACE,SAASP,aAAaA,CAACQ,OAAO,EAAE;IAC9B,IAAMN,WAAW,GAAG,IAAI3B,IAAI,CAAC,CAAC;IAC9B,IAAMkC,SAAS,GAAGR,eAAe,CAAC3B,YAAY,EAAE4B,WAAW,CAAC;;IAE5D;IACA,IAAI,CAAC5B,YAAY,KAAK,IAAI,IAAImC,SAAS,KAAK,CAACjC,iBAAiB,EAAE;MAC9D,IAAMkC,OAAO,GAAG/C,QAAQ,CAACgD,aAAa,CAAC,KAAK,CAAC;MAC7CD,OAAO,CAACE,SAAS,GAAG,yBAAyB;MAC7CF,OAAO,CAACG,WAAW,GACjBJ,SAAS,IACTP,WAAW,CAACG,kBAAkB,CAAC,EAAE,EAAE;QACjCC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,CAAC,CAAC,CAAC;MACN1C,aAAa,CAACiD,YAAY,CAACJ,OAAO,EAAE7C,aAAa,CAACkD,UAAU,CAAC;MAC7DvC,iBAAiB,GAAG,IAAI,CAAC,CAAC;IAC5B;;IAEAF,YAAY,GAAG4B,WAAW;IAE1B,IAAMc,UAAU,GAAGrD,QAAQ,CAACgD,aAAa,CAAC,KAAK,CAAC;IAChDK,UAAU,CAACJ,SAAS,GAAG,qBAAqB;IAE5C,IAAMK,OAAO,GAAGtD,QAAQ,CAACgD,aAAa,CAAC,KAAK,CAAC;IAC7CM,OAAO,CAACL,SAAS,GAAG,oBAAoB;IACxCK,OAAO,CAACJ,WAAW,GAAGL,OAAO;IAC7BQ,UAAU,CAACE,WAAW,CAACD,OAAO,CAAC;IAE/BpD,aAAa,CAACiD,YAAY,CAACE,UAAU,EAAEnD,aAAa,CAACkD,UAAU,CAAC;EAClE;;EAEA;AACF;AACA;EACE,SAASI,QAAQA,CAAA,EAAG;IAClB,IAAMC,eAAe,GAAG/B,iBAAiB,CAACjB,YAAY;IACtD,IAAMiD,YAAY,GAAG1D,QAAQ,CAAC2B,aAAa,CACzC,kCACF,CAAC,CAAClB,YAAY;IACd,IAAMkD,cAAc,GAAGF,eAAe,GAAGC,YAAY;IACrDhC,iBAAiB,CAACZ,KAAK,CAAC8C,MAAM,OAAAC,MAAA,CAAOF,cAAc,OAAI;IACvDjC,iBAAiB,CAACoC,SAAS,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrDzC,cAAc,CAAC0C,SAAS,sHAAgH;IACxIC,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAE,MAAM,CAAC;EACnD;;EAEA;AACF;AACA;EACE,SAASC,QAAQA,CAAA,EAAG;IAClBzC,iBAAiB,CAACZ,KAAK,CAAC8C,MAAM,GAAG,GAAG;IACpClC,iBAAiB,CAACoC,SAAS,CAACM,MAAM,CAAC,oBAAoB,CAAC;IACxD9C,cAAc,CAAC0C,SAAS,sEAAAH,MAAA,CAAkEnD,WAAW,WAAQ;IAC7GuD,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC;EACpD;;EAEA;AACF;AACA;EACE,SAAS3C,sBAAsBA,CAAA,EAAG;IAChCG,iBAAiB,CAACoC,SAAS,CAACO,QAAQ,CAAC,oBAAoB,CAAC,GACtDF,QAAQ,CAAC,CAAC,GACVX,QAAQ,CAAC,CAAC;EAChB;;EAEA;AACF;AACA;EACE,SAAS5B,mBAAmBA,CAAA,EAAG;IAC7B,IAAM0C,WAAW,GAAGL,YAAY,CAACM,OAAO,CAAC,mBAAmB,CAAC,KAAK,MAAM;IACxED,WAAW,GAAGd,QAAQ,CAAC,CAAC,GAAGW,QAAQ,CAAC,CAAC;IAErC,IAAMK,QAAQ,GAAGC,cAAc,CAACF,OAAO,CAAC,gBAAgB,CAAC,KAAK,MAAM;IACpE,IAAIC,QAAQ,EAAE;MACZ9C,iBAAiB,CAACZ,KAAK,CAAC4D,OAAO,GAAG,MAAM;IAC1C;EACF;;EAEA;AACF;AACA;EACE,SAASjD,SAASA,CAAA,EAAG;IACnBC,iBAAiB,CAACZ,KAAK,CAAC4D,OAAO,GAAG,MAAM;IACxCD,cAAc,CAACP,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC;EAClD;AACF,CAAC,CAAC,C;;;;;;;;;;ACnOF","sources":["webpack://chatdope/webpack/bootstrap","webpack://chatdope/webpack/runtime/make namespace object","webpack://chatdope/./assets/js/public.js","webpack://chatdope/./assets/css/frontend.scss"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Initializes the chat input behavior.\n * Resizes the input field based on its content, handles the Enter key to send messages, and appends messages to the chat container.\n */\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  /** @type {HTMLElement} Reference to the chat messages container element. */\n  const chatContainer = document.getElementById(\"chatdope-chats\");\n\n  /** @type {HTMLTextAreaElement} Reference to the chat input textarea element. */\n  const textArea = document.getElementById(\"chatdope-input\");\n\n  /** @type {HTMLElement} Reference to the send button of chat message. */\n  const sendButton = document.getElementById(\"chatdope-send\");\n\n  /** @type {number} Original height of the textarea when the page is loaded. */\n  const initialHeight = textArea.offsetHeight;\n\n  /** @type {number} Height of a single line within the textarea, excluding padding. */\n  const singleLineHeight = textArea.clientHeight;\n\n  /** @type {string} SVG content for minimize button. */\n  const minimizeSVG = `<line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"/>`;\n\n  /** @type {Date} Time of the last appended message. */\n  let previousTime = new Date();\n\n  /** @type {boolean} Timestamp insert status. */\n  let timestampInserted = false;\n\n  // Hide overflow initially\n  textArea.style.overflowY = \"hidden\";\n\n  /**\n   * Event handler for text input within the textarea.\n   * Adjusts the textarea's height based on its content.\n   */\n  textArea.addEventListener(\"input\", handleInput);\n\n  /**\n   * Event handler for the Enter key within the textarea.\n   * Appends messages to the chat container and clears the input.\n   */\n  textArea.addEventListener(\"keyup\", function (e) {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  });\n\n  // Event handler for the send button\n  sendButton.addEventListener(\"click\", sendMessage);\n\n  /** @type {HTMLElement} Reference to the minimize button. */\n  const minimizeButton = document.getElementById(\"chatdope-minimize\");\n  minimizeButton.addEventListener(\"click\", toggleMinimizeMaximize);\n\n  /** @type {HTMLElement} Reference to the close button. */\n  const closeButton = document.getElementById(\"chatdope-close\");\n  closeButton.addEventListener(\"click\", closeChat);\n\n  /** @type {HTMLElement} Reference to the chat container. */\n  const chatdopeContainer = document.querySelector(\".chatdope-container\");\n\n  // Initialize the chat state based on localStorage and sessionStorage\n  initializeChatState();\n\n  /**\n   * Handles the resizing of the text area based on its content.\n   */\n  function handleInput() {\n    // Reset to auto height for proper calculation\n    this.style.height = \"auto\";\n\n    // Handle case where input is blank\n    if (this.value.trim() === \"\") {\n      this.style.height = initialHeight + \"px\";\n      this.style.overflowY = \"hidden\";\n      return;\n    }\n\n    // Resize textarea based on content and max height (5 lines)\n    resizeTextArea(this);\n  }\n\n  /**\n   * Resizes the textarea based on content and max height (5 lines).\n   * @param {HTMLTextAreaElement} textAreaElement - The text area element to resize.\n   */\n  function resizeTextArea(textAreaElement) {\n    if (\n      textAreaElement.scrollHeight > singleLineHeight &&\n      textAreaElement.scrollHeight <= singleLineHeight * 5\n    ) {\n      textAreaElement.style.height = textAreaElement.scrollHeight + \"px\";\n    } else if (textAreaElement.scrollHeight > singleLineHeight * 5) {\n      textAreaElement.style.height = singleLineHeight * 5 + \"px\";\n      textAreaElement.style.overflowY = \"auto\";\n    } else {\n      textAreaElement.style.height = initialHeight + \"px\";\n    }\n  }\n\n  /**\n   * Sends the message in the text area to the chat container.\n   */\n  function sendMessage() {\n    const trimmedMessage = textArea.value.trim();\n    if (trimmedMessage !== \"\" && trimmedMessage.length <= 500) {\n      appendMessage(trimmedMessage);\n\n      textArea.value = \"\";\n      textArea.style.height = initialHeight + \"px\";\n      textArea.style.overflowY = \"hidden\";\n    }\n  }\n\n  /**\n   * Formats the timestamp for the chat message.\n   * @param {Date} previousTime - The timestamp of the previous message.\n   * @param {Date} currentTime - The timestamp of the current message.\n   * @return {string} The formatted timestamp or an empty string.\n   */\n  function formatTimestamp(previousTime, currentTime) {\n    const timeDifference = currentTime - previousTime;\n    const fiveMinutes = 5 * 60 * 1000; // 5 minutes in milliseconds\n\n    if (timeDifference > fiveMinutes) {\n      // If the time difference is more than 5 minutes, return the formatted time\n      return currentTime.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n    } else {\n      // If the time difference is less than or equal to 5 minutes, return an empty string\n      return \"\";\n    }\n  }\n\n  /**\n   * Appends a message to the chat container.\n   * @param {string} message - The message to append.\n   */\n  function appendMessage(message) {\n    const currentTime = new Date();\n    const timestamp = formatTimestamp(previousTime, currentTime);\n\n    // Check if it's the initial chat or if there's a valid timestamp and no timestamp has been inserted\n    if ((previousTime === null || timestamp) && !timestampInserted) {\n      const timeDiv = document.createElement(\"div\");\n      timeDiv.className = \"chat-message__timestamp\";\n      timeDiv.textContent =\n        timestamp ||\n        currentTime.toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        }); // Use the current time if it's the initial chat\n      chatContainer.insertBefore(timeDiv, chatContainer.firstChild);\n      timestampInserted = true; // Mark that the timestamp has been inserted\n    }\n\n    previousTime = currentTime;\n\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.className = \"chat-message sender\";\n\n    const textDiv = document.createElement(\"div\");\n    textDiv.className = \"chat-message__text\";\n    textDiv.textContent = message;\n    messageDiv.appendChild(textDiv);\n\n    chatContainer.insertBefore(messageDiv, chatContainer.firstChild);\n  }\n\n  /**\n   * Minimizes the chat window.\n   */\n  function minimize() {\n    const containerHeight = chatdopeContainer.clientHeight;\n    const headerHeight = document.querySelector(\n      \".chatdope-container__user-header\"\n    ).clientHeight;\n    const minimizeHeight = containerHeight - headerHeight;\n    chatdopeContainer.style.bottom = `-${minimizeHeight}px`;\n    chatdopeContainer.classList.add(\"chatdope-minimized\");\n    minimizeButton.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M5 19l14-14M15 5l4 0M19 9l0-4\"/></svg>`;\n    localStorage.setItem(\"chatdopeMinimized\", \"true\");\n  }\n\n  /**\n   * Maximizes the chat window.\n   */\n  function maximize() {\n    chatdopeContainer.style.bottom = \"0\";\n    chatdopeContainer.classList.remove(\"chatdope-minimized\");\n    minimizeButton.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">${minimizeSVG}</svg>`;\n    localStorage.setItem(\"chatdopeMinimized\", \"false\");\n  }\n\n  /**\n   * Toggles between minimizing and maximizing the chat window.\n   */\n  function toggleMinimizeMaximize() {\n    chatdopeContainer.classList.contains(\"chatdope-minimized\")\n      ? maximize()\n      : minimize();\n  }\n\n  /**\n   * Initializes the chat window's state based on the current local storage and session storage settings.\n   */\n  function initializeChatState() {\n    const isMinimized = localStorage.getItem(\"chatdopeMinimized\") === \"true\";\n    isMinimized ? minimize() : maximize();\n\n    const isClosed = sessionStorage.getItem(\"chatdopeClosed\") === \"true\";\n    if (isClosed) {\n      chatdopeContainer.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Closes the chat window and sets the session storage.\n   */\n  function closeChat() {\n    chatdopeContainer.style.display = \"none\";\n    sessionStorage.setItem(\"chatdopeClosed\", \"true\");\n  }\n});\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":["document","addEventListener","chatContainer","getElementById","textArea","sendButton","initialHeight","offsetHeight","singleLineHeight","clientHeight","minimizeSVG","previousTime","Date","timestampInserted","style","overflowY","handleInput","e","key","shiftKey","preventDefault","sendMessage","minimizeButton","toggleMinimizeMaximize","closeButton","closeChat","chatdopeContainer","querySelector","initializeChatState","height","value","trim","resizeTextArea","textAreaElement","scrollHeight","trimmedMessage","length","appendMessage","formatTimestamp","currentTime","timeDifference","fiveMinutes","toLocaleTimeString","hour","minute","message","timestamp","timeDiv","createElement","className","textContent","insertBefore","firstChild","messageDiv","textDiv","appendChild","minimize","containerHeight","headerHeight","minimizeHeight","bottom","concat","classList","add","innerHTML","localStorage","setItem","maximize","remove","contains","isMinimized","getItem","isClosed","sessionStorage","display"],"sourceRoot":""}